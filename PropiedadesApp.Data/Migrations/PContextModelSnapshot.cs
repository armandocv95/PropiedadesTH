// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using PropiedadesApp.Data;

#nullable disable

namespace PropiedadesApp.Data.Migrations
{
    [DbContext(typeof(PContext))]
    partial class PContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.2")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseSerialColumns(modelBuilder);

            modelBuilder.Entity("PropiedadesApp.Data.Activity", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseSerialColumn(b.Property<int>("id"));

                    //b.Property<string>("condicion")
                    //    .IsRequired()
                    //    .HasColumnType("text");

                    b.Property<DateTime>("created_at")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("property_id")
                        .HasColumnType("integer");

                    b.Property<int>("propertyid")
                        .HasColumnType("integer");

                    b.Property<DateTime>("schedule")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("status")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("title")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("updated_at")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("id");

                    b.HasIndex("propertyid");

                    b.ToTable("Activities");
                });

            modelBuilder.Entity("PropiedadesApp.Data.Property", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseSerialColumn(b.Property<int>("id"));

                    b.Property<string>("address")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("created_at")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("description")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("disabled_at")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("status")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("title")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("updated_at")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("id");

                    b.ToTable("Properties");
                });

            modelBuilder.Entity("PropiedadesApp.Data.Survey", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseSerialColumn(b.Property<int>("id"));

                    b.Property<int>("activity_id")
                        .HasColumnType("integer");

                    b.Property<int>("activityid")
                        .HasColumnType("integer");

                    b.Property<string>("answers")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("created_at")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("id");

                    b.HasIndex("activityid");

                    b.ToTable("Surveys");
                });

            modelBuilder.Entity("PropiedadesApp.Data.Activity", b =>
                {
                    b.HasOne("PropiedadesApp.Data.Property", "property")
                        .WithMany("activities")
                        .HasForeignKey("propertyid")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("property");
                });

            modelBuilder.Entity("PropiedadesApp.Data.Survey", b =>
                {
                    b.HasOne("PropiedadesApp.Data.Activity", "activity")
                        .WithMany("surveys")
                        .HasForeignKey("activityid")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("activity");
                });

            modelBuilder.Entity("PropiedadesApp.Data.Activity", b =>
                {
                    b.Navigation("surveys");
                });

            modelBuilder.Entity("PropiedadesApp.Data.Property", b =>
                {
                    b.Navigation("activities");
                });
#pragma warning restore 612, 618
        }
    }
}
